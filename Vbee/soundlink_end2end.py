# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eaqv8UCEh_3jOEak2P8KD164pDXkEuqi
"""

import requests
import json
import time

AUTHORIZATION_CODE = 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJmRzE4X1Z1TGRTQ2tFbHlIS0g0NEY1WGNHd1dXUG1zbXRydnJBaXV2b2JzIn0.eyJleHAiOjE2NTYyOTkwNjksImlhdCI6MTY1NjIxMjY2OSwiYXV0aF90aW1lIjoxNjU2MjEyNjU1LCJqdGkiOiI1YTZlODkyOC1jMGY1LTRhNjItYjE2ZC1hZDE3OTdmMTZjNzUiLCJpc3MiOiJodHRwczovL2FjY291bnRzLnZiZWUudm4vYXV0aC9yZWFsbXMvdmJlZS1ob2xkaW5nIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6ImM1MTUzODU4LTdlMDQtNDcyMy1iY2ViLTMzYzRlZTFiYmNmNCIsInR5cCI6IkJlYXJlciIsImF6cCI6InZiZWUtdHRzLWNybSIsIm5vbmNlIjoiNDY1NTc5NmMtYTAzYi00MmMwLTg1NmUtMWUxZmJhMjk3MGY5Iiwic2Vzc2lvbl9zdGF0ZSI6IjkyOGFhNjE2LTU0NmQtNDU4Yi1iZDM2LWUwNDk5M2IyMTQzMSIsImFjciI6IjAiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly92YmVlLnZuIiwiaHR0cHM6Ly9ob21lLnZiZWUudm4iLCJodHRwczovL2FwaS52YmVlLnZuIiwiaHR0cHM6Ly9zdHVkaW8udmJlZS52biIsImh0dHBzOi8vd3d3LnZiZWUudm4iLCJodHRwOi8vbG9jYWxob3N0OjMwMDAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImRlZmF1bHQtcm9sZXMtdmJlZS1ob2xkaW5nIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUiLCJzaWQiOiI5MjhhYTYxNi01NDZkLTQ1OGItYmQzNi1lMDQ5OTNiMjE0MzEiLCJpZGVudGl0eV9wcm92aWRlciI6Imdvb2dsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpcCI6IjExMy4xODUuNzkuMjA2IiwibmFtZSI6Imh1eSBsZSIsImF2YXRhciI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FBVFhBSnltUW1aQ2NlMlJJMHlCWnNUR0U1X0xOLUszVlVJVXRYMUwycFRhPXM5Ni1jIiwicHJlZmVycmVkX3VzZXJuYW1lIjoibGh1eTYwMzc3QGdtYWlsLmNvbSIsImdpdmVuX25hbWUiOiJodXkiLCJmYW1pbHlfbmFtZSI6ImxlIiwiZW1haWwiOiJsaHV5NjAzNzdAZ21haWwuY29tIn0.ctk2nJlYPqG0sMNKr-dnMynu_mT2ocbIlQpERFVPuQElW22hjMkfRx31MHfkwK_JlrntRjbWkxb53PkHH76mGfOOo_9xzCvOr9PtwOu0rkuRKqBg8uBIsoMfx6n4Zoqd-h8D4tssN8rGVJZs5G79t798u9QQrx0pB5V5yewTQaI_3A3Jq3Vl1poN7JRwSh2E4BJmwddcTi9ULEys5QHaXb1gy267vdQd9Tnf15TPBTCBJ4zPh_fBt3HSKp0N8S5tGIbMUWLb26uPXWuQ9MSP6sqbtxUjZMBTyNMV8QW3IPTVcABhA-wdDz36uLFcE5Hpo42B4nN8p6B6B3gRYV-C4w'

LINK_TEST_ONLINE = 'https://vbee.vn/api/v1/online'
LINK_SEND_TEXT = 'https://vbee.vn/api/v1/synthesis'
LINK_DOWNLOAD = 'https://vbee.vn/api/v1/requests/'

headers = {'content-type': 'application/json',
           'user-agent' : 'PostmanRuntime/7.29.0',
           'accept' : '*/*',
           'accept-encoding' : 'gzip, deflate, br',
           'connection' : 'keep-alive',
           'authorization' : AUTHORIZATION_CODE}

def make_payload(str_input, audioType="wav", bitrate=128000, volume=80, voiceCode="hn_female_ngochuyen_full_48k-fhg", speed=1):
  return {"audioType":audioType,"bitrate":bitrate,"backgroundMusic":{"volume":volume},"text":str_input,"voiceCode":voiceCode,"speed":speed}

def post(str_input, url, audioType="wav", bitrate=128000, volume=80, voiceCode="hn_female_ngochuyen_full_48k-fhg", speed=1):
  if str_input == None:
    return requests.post(url, data=json.dumps({}), headers=headers).json()
  return requests.post(url, data=json.dumps(make_payload(str_input, audioType="wav", bitrate=128000, volume=80, voiceCode="hn_female_ngochuyen_full_48k-fhg", speed=1)), headers=headers).json()

def txt_to_wav(str_input, recursive_level=0, delay_time=5, audioType="wav", bitrate=128000, volume=80, voiceCode="hn_female_ngochuyen_full_48k-fhg", speed=1):
  ### CHECK IF VBEE ONLINE
  r = post(None, LINK_TEST_ONLINE)
  if r['status'] == 0:
    if recursive_level == 5:
      return False
    else:
      time.sleep(delay_time)
      return txt_to_wav(str_input, recursive_level+1)

  ### GET REQUEST ID
  try:
    request_id = post(str_input, LINK_SEND_TEXT, audioType=audioType, bitrate=bitrate, volume=volume, voiceCode=voiceCode, speed=speed)['result']['request_id']
  except:
    return False

  ### WAV CREATION
  try:
    LINK_REQUEST = LINK_DOWNLOAD + request_id
    FILE_NAME = "OUTPUT." + audioType
    kt = False
    r_ = requests.get(LINK_REQUEST, headers=headers)
    while r_.json()['result']['status'] == 'IN_PROGRESS':
        time.sleep(2)
        r_ = requests.get(LINK_REQUEST, headers=headers)
    return r_.json()['result']['audio_link']
  except:
    return False
